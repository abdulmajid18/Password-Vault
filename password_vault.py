# -*- coding: utf-8 -*-
"""Password vault.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZFR5f0bdTgPmMN3eekpNq_Ck-u7FiwKc
"""

!pip install face_recognition

import cv2
import os
from google.colab.patches import cv2_imshow
import face_recognition

def create_table():
    try:
      c.execute('CREATE TABLE IF NOT EXISTS credentials(account_type BLOB,passwoord BLOB)')
      print("Your safe has been created!\nWhat would you like to store in it today?")
    except:
      c.execute('CREATE TABLE IF NOT EXISTS credentials(account_type BLOB,passwoord BLOB)')
      print("Your vault is ready!, Enter desired task?")


def face_encoding():
  test_image= input('')
  test_image_name = input('Name ')
  test_encoding = face_recognition.load_image_file(test_image)
  encoded_known_face = face_recognition.face_encodings(test_encoding)[0]   

def create_safe():
    account_email = input('Enter account type ')
    password = eval(input('Enter your password '))
    c.execute('''INSERT INTO credentials (account_type,passwoord) VALUES (?,?);''',(account_email,password))
    conn.commit()
    c.close()
    conn.close()
    print('Saving Credentials')
    print('Done!')

#INSERT INTO KEYS (PASS_KEY) VALUES (%s);' %('"' + secret_key +'"')
#command = 'INSERT INTO SAFE (FULL_NAME, NAME, EXTENSION, FILES) VALUES (%s, %s, %s, %s);' %('"' + file_name +'"', '"' + NAME +'"', '"' + EXTENSION +'"', '"' + file_string +'"')

#from hashlib import sha256
def intro():
  masterpass = 123
  limit = 0
  print('Face ready to be scanned')
  path = input('')
  image = face_recognition.load_image_file(path)
  location = face_recognition.face_locations(image,model='cnn')
  encoding = face_recognition.face_encodings(image,location)
  image=cv2.cvtColor(image,cv2.COLOR_RGB2BGR)
  face_encoding,face_location = encoding,location
  #Comparing the known_face (Encoded known_faces) to the unknown_faces
  #face_encoding == encoded_unknown_faces
  results = face_recognition.compare_faces(encoded_known_face,face_encoding)
  match = None
  # if the known_face == unknown_face ie TRUE
  if True in results:
    print('Access granted')
    permission = 'Access granted'
    while True:
      print("WELCOME BACK SIR :)")
      print('Perform your desired operation')
      print("\n"+ "*"*15)
      print("Commands:")
      print("q = quit program")
      print("gp = get password")
      print("sp = store password")
      print("*"*15)
      input_ = input(":")
      if input_ == "q":
        break

      if input_ == "sp":
        create_table()
        create_safe()
        
      if input_ == "gp":
        email = input('Enter email to obtain pasword ')
        c = conn.cursor()
        c.execute("SELECT * from credentials WHERE account_type = '{}'".format(email))
        print(c.fetchone())
        conn.commit()
        c.close()
          
  else:
    print('Access denied')
    permission = 'denied'
    password = eval(input("ENTER THE MASTER PASSWORD :-"))
    while limit < 3:
      if password != masterpass:
          print('Re-enter a valid password')
          print("Invalid Password\n")
          limit += 1
      if masterpass == password:
          print("WELCOME BACK SIR :)")
          print('Perform your desired operation')
          limit += 3
          if True:
            if masterpass == password:
              print("\n"+ "*"*15)
              print("Commands:")
              print("q = quit program")
              print("gp = get password")
              print("sp = store password")
              print("*"*15)
              input_ = input(":")
              if input_ == "q":
                break

              if input_ == "sp":
                create_table()
                create_safe()
                
              if input_ == "gp":
                email = input('Enter email to obtain pasword ')
                c = conn.cursor()
                c.execute("SELECT * from credentials WHERE account_type = '{}'".format(email))
                print(c.fetchone())
                conn.commit()
                c.close()

face_encoding()

import sqlite3
conn = sqlite3.connect('/content/drive/My Drive/pass_manager.db')
c = conn.cursor()

intro()

